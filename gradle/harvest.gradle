apply from: "$rootDir/gradle/base.gradle"

import com.xlson.groovycsv.CsvParser
import java.time.*
import java.time.format.DateTimeFormatter

// TODO find a way to general import buildscript deps...
buildscript {
	dependencies {
		classpath fileTree("$rootDir/gradle/lib").include("**.jar")
	}
}

///////  Configuration

ext {
	// The Harvest server configuration
	harvest = [
		// The harvest broker name.
		broker: null,
		
		// The harvest project name.
		project: null,
		
		// The harvest viewpath.
		viewpath: null
	]
	
	// The git bridge configuration, override in used project
	gitbridge = [
		// The store that holds meta data about harvest, e.g. the last fetched date and version.
		data: [
			// The store location. Must be set in implementing project.
			dir: null
		],
		
		// The start point for history retrieval.
		baseline: 0
	]

	formats = [
		US_DATE: DateTimeFormatter.ofPattern("MM/dd/yy")
	]
}

///////  Updating the Git repository

/**
 * Returns the array to execute the given harvest CLI command
 */
def getHarvestCommand(tool) {
	return [tool, "-b", harvest.broker, "-en", harvest.project, "-vp", harvest.viewpath]
}

/**
 * Fetches version information using the hsv command
 */
def fetchVersions = { lastFetch, currentFetch ->
	def command = getHarvestCommand("hsv")
	if (harvest.user) {
		command += ["-usr", harvest.user]
	} 
	if (harvest.password) {
		command += ["-pw", harvest.password]
	} else {
		command += ["-prompt"]
	}
	def from = LocalDateTime.ofEpochSecond(lastFetch.intdiv(1000), 1000 * (lastFetch % 1000) as Integer, ZoneOffset.UTC).format(formats.US_DATE)
	def to = LocalDateTime.ofEpochSecond(currentFetch.intdiv(1000), 1000 * (currentFetch % 1000) as Integer, ZoneOffset.UTC).format(formats.US_DATE)
	command += ["-id", "sd", from, to]
	return shell(command)
}

task updateGit {
	doLast {
		assert file(gitbridge.data.dir).exists()
		assert harvest.broker != null
		
		def versionsFile = file("${gitbridge.data.dir}/versions.txt")
		def versions = (versionsFile.exists() ? versionsFile.readLines() : []) as Set
		
		def timestampFile = file("${gitbridge.data.dir}/timestamp.txt")
		def lastFetch = Long.valueOf(timestampFile.exists() ? timestampFile.readLines()[0] : gitbridge.baseline)
		def currentFetch = System.currentTimeMillis();	
		
		def hsvOutput = fetchVersions(lastFetch, currentFetch)

		def csvc = CsvParser.parseCsv( hsvOutput, separator: '\t' )
		for(line in csvc) {
			println "$line.Name"
		}

		versionsFile.append "${version}\r\n"
		timestampFile.write "${currentFetch}"
	}
}

